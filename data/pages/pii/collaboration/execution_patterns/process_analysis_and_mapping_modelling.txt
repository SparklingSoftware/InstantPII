
===== Process analysis and mapping/modelling =====
The most important but unfortunately also the most boring part of the process improvements is the analysis of current process. Not many people want to spend time in a room discussing the process maps that might eventually change their working processes.

My personal view on the reason is that it’s because the lack of a complete process map doesn’t hurt them in their day to day life.
So, to work with this instead of against it, would be to collect the interfaces that do hurt people in their day to day lives and start with those. Because if it isn’t worth improving, why are we spending time on it to map it? It might be a waste of time.
There is one catch though: It’s a very good idea to work in silos first: First of all map all the current test processes, the Development processes, the Infrastructure team processes, etc. That way, the scope is very clear and won’t grow (much).

Once you have a baseline you can easily identify the interfaces between competencies and prioritise the work. As said: Usually the ones that are hurting first.

This works quite well from a motivation point of view: The people who are hurting are all of a sudden advocates to map the processes not only of their own competency, but also the other competency. As they both need to have a baseline to improve on!
It is important to keep in mind that not everyone is interested in the results either. Developers just want to cut code, not stroll through boring process maps. Moreover, if the process maps isn’t written in a language that they will understand, no way they’ll spend time on it. 

Talking to developers and testers about the difference between “Service Management” and “Application Lifecycle Management” won’t be very productive, as you’ll be explaining it over and over again and still no one would understand.

The point is that the language used in the process maps should be understandable by all competencies. It can have references to specific content of the competency specific processes, but the overarching should be understandable by everyone. 

It’s no use having a 100% correct process map that no one is using. You can better settle for a 80% correct, aligned with the existing frameworks like ITIL, BABOK, etc, that is actually used and understood.


